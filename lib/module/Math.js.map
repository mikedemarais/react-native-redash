{"version":3,"sources":["Math.ts"],"names":["Animated","Value","block","set","sqrt","cond","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","greaterThan","pow","and","greaterOrEq","lessOrEq","bin","value","args","reduce","acc","arg","clamp","lowerBound","upperBound","between","inclusive","approximates","a","b","precision","toRad","deg","Math","PI","toDeg","rad","atan2","y","x","t0","t1","t3","t4","atan","acos","x1","negate","ret","asin","cubicBezier","t","p0","p1","p2","p3","term","c","d"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  Value,\n  block,\n  set,\n  sqrt,\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = (\n  value: Animated.Adaptable<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>\n): Animated.Node<number> => min2(max2(lowerBound, value), upperBound);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive: boolean = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = (\n  a: Animated.Adaptable<number>,\n  b: Animated.Adaptable<number>,\n  precision: Animated.Adaptable<number> = 0.001\n) => lessThan(abs(sub(a, b)), precision);\n\nexport const toRad = (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(deg, Math.PI / 180);\n\nexport const toDeg = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(rad, 180 / Math.PI);\n\n// https://developer.download.nvidia.com/cg/atan2.html\nexport const atan2 = (\n  y: Animated.Adaptable<number>,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const t0: Animated.Value<number> = new Value();\n  const t1: Animated.Value<number> = new Value();\n  // const t2: Animated.Value<number> = new Value();\n  const t3: Animated.Value<number> = new Value();\n  const t4: Animated.Value<number> = new Value();\n  return block([\n    set(t3, abs(x)),\n    set(t1, abs(y)),\n    set(t0, max(t3, t1)),\n    set(t1, min(t3, t1)),\n    set(t3, divide(1, t0)),\n    set(t3, multiply(t1, t3)),\n    set(t4, multiply(t3, t3)),\n    set(t0, -0.01348047),\n    set(t0, add(multiply(t0, t4), 0.057477314)),\n    set(t0, sub(multiply(t0, t4), 0.121239071)),\n    set(t0, add(multiply(t0, t4), 0.195635925)),\n    set(t0, sub(multiply(t0, t4), 0.332994597)),\n    set(t0, add(multiply(t0, t4), 0.99999563)),\n    set(t3, multiply(t0, t3)),\n    set(t3, cond(greaterThan(abs(y), abs(x)), sub(1.570796327, t3), t3)),\n    set(t3, cond(lessThan(x, 0), sub(Math.PI, t3), t3)),\n    set(t3, cond(lessThan(y, 0), multiply(t3, -1), t3)),\n    t3\n  ]);\n};\n\n// https://developer.download.nvidia.com/cg/atan.html\nexport const atan = (x: Animated.Adaptable<number>): Animated.Node<number> =>\n  atan2(x, 1);\n\n// https://developer.download.nvidia.com/cg/acos.html\nexport const acos = (x1: Animated.Adaptable<number>) => {\n  const negate: Animated.Value<number> = new Value();\n  const x: Animated.Value<number> = new Value();\n  const ret: Animated.Value<number> = new Value();\n  return block([\n    set(negate, lessThan(x, 0)),\n    set(x, abs(x1)),\n    set(ret, -0.0187293),\n    set(ret, multiply(ret, x)),\n    set(ret, add(ret, 0.074261)),\n    set(ret, multiply(ret, x)),\n    set(ret, sub(ret, 0.2121144)),\n    set(ret, multiply(ret, x)),\n    set(ret, add(ret, 1.5707288)),\n    set(ret, sqrt(sub(1, x))),\n    set(ret, sub(ret, multiply(2, negate, ret))),\n    add(multiply(negate, Math.PI), ret)\n  ]);\n};\n\n// https://developer.download.nvidia.com/cg/asin.html\nexport const asin = (x1: Animated.Adaptable<number>) => {\n  const negate: Animated.Value<number> = new Value();\n  const x: Animated.Value<number> = new Value();\n  const ret: Animated.Value<number> = new Value();\n  return block([\n    set(negate, lessThan(x, 0)),\n    set(x, abs(x1)),\n    set(ret, -0.0187293),\n    set(ret, multiply(ret, x)),\n    set(ret, add(ret, 0.074261)),\n    set(ret, multiply(ret, x)),\n    set(ret, sub(ret, 0.2121144)),\n    set(ret, multiply(ret, x)),\n    set(ret, add(ret, 1.5707288)),\n    set(ret, sub(Math.PI / 2, multiply(sqrt(sub(1, x)), ret))),\n    sub(ret, multiply(2, negate, ret))\n  ]);\n};\n\nexport const cubicBezier = (\n  t: Animated.Node<number>,\n  p0: Animated.Node<number>,\n  p1: Animated.Node<number>,\n  p2: Animated.Node<number>,\n  p3: Animated.Node<number>\n): Animated.Node<number> => {\n  const term = sub(1, t);\n  const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};\n"]}