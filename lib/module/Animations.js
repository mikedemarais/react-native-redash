import _toConsumableArray from"@babel/runtime/helpers/toConsumableArray";import Animated from"react-native-reanimated";import{useMemoOne}from"use-memo-one";import{min}from"./Math";var Value=Animated.Value,set=Animated.set,add=Animated.add,multiply=Animated.multiply,cond=Animated.cond,eq=Animated.eq,abs=Animated.abs,sub=Animated.sub,interpolate=Animated.interpolate,not=Animated.not,diff=Animated.diff,lessThan=Animated.lessThan,greaterThan=Animated.greaterThan;export var moving=function moving(position){var minPositionDelta=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1e-3;var emptyFrameThreshold=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;var delta=diff(position);var noMovementFrames=new Value(0);return cond(lessThan(abs(delta),minPositionDelta),[set(noMovementFrames,add(noMovementFrames,1)),not(greaterThan(noMovementFrames,emptyFrameThreshold))],[set(noMovementFrames,0),1]);};export var snapPoint=function snapPoint(value,velocity,points){var point=add(value,multiply(0.2,velocity));var diffPoint=function diffPoint(p){return abs(sub(point,p));};var deltas=points.map(function(p){return diffPoint(p);});var minDelta=min.apply(void 0,_toConsumableArray(deltas));return points.reduce(function(acc,p){return cond(eq(diffPoint(p),minDelta),p,acc);},new Value());};export var bInterpolate=function bInterpolate(value,origin,destination){return interpolate(value,{inputRange:[0,1],outputRange:[origin,destination]});};export var useValues=function useValues(values,deps){return useMemoOne(function(){return values.map(function(v){return new Value(v);});},deps);};export var useNamedValues=function useNamedValues(values,deps){return useMemoOne(function(){var result={};Object.keys(values).forEach(function(key){result[key]=new Value(values[key]);});return result;},deps);};
//# sourceMappingURL=Animations.js.map